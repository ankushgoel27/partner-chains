name: "Deploy and Test Against Local Environment"
description: "Deploys a local environment and runs end-to-end tests."
inputs:
  image:
    description: "Node Image"
    required: true
  tag:
    description: "PC Artifact Tag"
    required: true

outputs: {}

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: ./partner-chains
    - name: Acquire AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN_SECRET }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to ECR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.ECR_REGISTRY_SECRET }}
    - name: Download partner-chains-cli
      uses: actions/download-artifact@v4
      with:
        name: partner-chains-cli-CI-x86_64-linux
    - name: Download partner-chains-node
      uses: actions/download-artifact@v4
      with:
        name: partner-chains-node-CI-x86_64-linux
    - name: Deploy local environment with overrides
      run: |
        ls -la
        cp partner-chains-cli-${{ inputs.tag }}-x86_64-linux ./partner-chains/dev/local-environment/configurations/partner-chains-cli/overrides/partner-chains-cli
        cp .partner-chains-node-${{ inputs.tag }}-x86_64-linux ./partner-chains/dev/local-environment/configurations/partner-chains-cli/overrides/partner-chains-node
        cd ./partner-chains/dev/local-environment
        bash setup.sh --non-interactive --overrides --postgres-password=azMpOp4mTqhlKDmgCVQr --node-image=${{ inputs.image }}
        docker compose up -d
      shell: bash
    - name: checkout pc-tests ref_name branch
      id: pc-tests
      uses: actions/checkout@v4
      continue-on-error: true
      with:
        repository: input-output-hk/sidechains-tests
        token: ${{ env.ACTIONS_PAT }}
        ref: ${{ github.ref_name }}
        path: e2e-tests
    - name: checkout pc-tests master (fallback)
      if: steps.pc-tests.outcome == 'failure'
      uses: actions/checkout@v4
      with:
        repository: input-output-hk/sidechains-tests
        token: ${{ env.ACTIONS_PAT }}
        ref: master
        path: e2e-tests
    - name: Setup python and dependencies
      run: |
        cd e2e-tests
        sudo apt update
        sudo apt install -y software-properties-common
        sudo add-apt-repository ppa:deadsnakes/ppa
        sudo apt update
        sudo apt install -y python3.10 python3.10-venv python3.10-dev
        sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1
        curl -L --silent https://github.com/getsops/sops/releases/download/v3.7.3/sops_3.7.3_amd64.deb > sops.deb && sudo dpkg -i sops.deb && rm sops.deb
        python -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt
      shell: bash
    - name: Wait for the PC node 1 to start
      run: |
        while ! docker exec cardano-node-1 [ -e /shared/cardano.ready ]; do sleep 1; done
        echo "Cardano network is ready! Waiting for Partner Chain first node to start..."
        INIT_TIMESTAMP=$(docker exec cardano-node-1 cat /shared/cardano.start)
        echo "INIT_TIMESTAMP=$INIT_TIMESTAMP" >> $GITHUB_ENV
        while ! docker exec partner-chains-node-1 [ -e /shared/partner-chains-node-1.ready ]; do \
          epoch=$(docker exec cardano-node-1 cardano-cli query tip --testnet-magic 42 | jq -r .epoch) && \
          echo "Epoch: $epoch" && \
          sleep 10; \
        done
      shell: bash
    - name: Run smoke tests
      uses: ./partner-chains/.github/actions/tests/run-e2e-tests
      with:
        env: ${{ env.TEST_ENVIRONMENT }}
        keyword: "test_get_status or test_get_params"
    - name: Wait for epoch 3
      uses: ./partner-chains/.github/actions/tests/wait-for-epoch
      with:
        epoch: 3
        deployment: docker
        node: cardano-node-1
        environment:
    - name: Run registration tests
      uses: ./partner-chains/.github/actions/tests/run-tests
      with:
        env: ${{ env.TEST_ENVIRONMENT }}
        keyword: "test_register_candidate or test_deregister_candidate or test_add_permissioned_candidate or test_remove_permissioned_candidate"
        init_timestamp: ${{ env.INIT_TIMESTAMP }}
        blockchain: substrate
    - name: Wait for epoch 4
      uses: ./partner-chains/.github/actions/tests/wait-for-epoch
      with:
        epoch: 4
        deployment: docker
        node: cardano-node-1
        environment:
    - name: Run registration tests
      uses: ./partner-chains/.github/actions/tests/run-tests
      with:
        env: ${{ env.TEST_ENVIRONMENT }}
        keyword: "test_register_candidate or test_deregister_candidate or test_add_permissioned_candidate or test_remove_permissioned_candidate"
        init_timestamp: ${{ env.INIT_TIMESTAMP }}
        blockchain: substrate
    - name: Wait for epoch 5
      uses: ./partner-chains/.github/actions/tests/wait-for-epoch
      with:
        epoch: 5
        deployment: docker
        node: cardano-node-1
        environment:
    - name: Run all tests
      uses: ./partner-chains/.github/actions/tests/run-tests
      with:
        env: ${{ env.TEST_ENVIRONMENT }}
        mc_epoch: 4
        init_timestamp: ${{ env.INIT_TIMESTAMP }}
        blockchain: substrate
    - name: Wait for epoch 6
      uses: ./partner-chains/.github/actions/tests/wait-for-epoch
      with:
        epoch: 6
        deployment: docker
        node: cardano-node-1
        environment:
    - name: Run all tests
      uses: ./partner-chains/.github/actions/tests/run-tests
      with:
        env: ${{ env.TEST_ENVIRONMENT }}
        mc_epoch: 5
        init_timestamp: ${{ env.INIT_TIMESTAMP }}
        blockchain: substrate
    - name: Wait for epoch 7
      uses: ./partner-chains/.github/actions/tests/wait-for-epoch
      with:
        epoch: 7
        deployment: docker
        node: cardano-node-1
        environment:
    - name: Run all tests
      uses: ./partner-chains/.github/actions/tests/run-tests
      with:
        env: ${{ env.TEST_ENVIRONMENT }}
        mc_epoch: 6
        init_timestamp: ${{ env.INIT_TIMESTAMP }}
        blockchain: substrate
    - name: Stop partner-chains-demo
      run: docker compose down --volumes
      shell: bash