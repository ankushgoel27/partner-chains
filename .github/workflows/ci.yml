name: CI 

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - master
env:
  AWS_REGION: "eu-central-1"
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock

permissions:
  id-token: write
  contents: write

jobs:
  earthly-build-and-push:
    runs-on: ubuntu-latest
    if: github.event.action != 'closed' || github.event.pull_request.merged == true
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Earthly
        uses: ./.github/earthly-setup
        with:
          ssh_key: ${{ secrets.SUBSTRATE_REPO_SSH_KEY }}
          config_tar: ${{ secrets.EARTHLY_TAR }}
      - name: Acquire AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_SECRET }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ECR_REGISTRY_SECRET }}
      - name: Build and Push to ECR
        env:
          EARTHLY_CI: true
          EARTHLY_OUTPUT: true 
          EARTHLY_PUSH: true
        run: |
          earthly -P +ci --image=${{ secrets.ECR_REGISTRY_SECRET }}/substrate-node
      - name: Upload chain spec artifacts
        uses: actions/upload-artifact@v4
        with:
          name: chain-specs
          path: |
            ./devnet_chain_spec.json
            ./staging_preview_chain_spec.json
            ./staging_preprod_chain_spec.json

  build-linux:
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build and Upload for Linux
        uses: ./.github/actions/artifacts/build-linux
        with:
          sha: ${{ github.sha }}
          tag: CI 
          os: linux

  partner-chains-smart-contracts:
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Parse Flake and Download Release
        uses: ./.github/actions/parse-flake-and-download-release
        with:
          sha: ${{ github.sha }}

  local-environment-tests:          
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-latest
    needs: [build-linux, partner-chains-smart-contracts]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Deploy and test against local environment
        uses: ./.github/actions/tests/local-environment-tests
        with:
          tag: CI 
          image: ${{ secrets.ECR_REGISTRY_SECRET }}/substrate-node:${{ github.sha }}

  devshell-tests:
    permissions:
      id-token: write
      contents: write
    strategy:
      matrix:
        os: [nixos, macos]
    runs-on:
      - self-hosted
      - ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Acquire AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_ }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Add signing key for nix
        run: echo "${{ secrets.NIX_SIGNING_KEY }}" > "${{ runner.temp }}/nix-key"
      - name: Run nixci to build/test all outputs
        run: |
          nix run github:srid/nixci -- -v build -- --fallback > /tmp/outputs
      - name: Copy nix scopes to nix cache
        run: |
          nix-store --stdin -q --deriver < /tmp/outputs | nix-store --stdin -qR --include-outputs \
          | nix copy --stdin --to \
          "s3://cache.sc.iog.io?secret-key=${{ runner.temp }}/nix-key&region=$AWS_DEFAULT_REGION" \
          && rm /tmp/outputs

  upload-chain-specs:
    permissions:
      id-token: write
      contents: write
    needs: [earthly-build-and-push]
#    if: github.event.pull_request.merged == true
    runs-on: [self-hosted, eks]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Upload chain spec artifacts to Kubernetes
        uses: ./.github/actions/deploy/upload-chain-specs
        with:
          sha: ${{ github.sha }}
        env:
          kubeconfig_base64: ${{ secrets.kubeconfig_base64 }}
          K8S_SERVER: ${{ secrets.K8S_SERVER }}
          K8S_SA_TOKEN: ${{ secrets.K8S_SA_TOKEN }}

  deploy-rustdoc:
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Deploy Rust Docs
        uses: ./.github/actions/deploy/deploy-rustdoc
        with:
          ssh_key: ${{ secrets.SUBSTRATE_REPO_SSH_KEY }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock

    
